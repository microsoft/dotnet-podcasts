name: Podcast Hub CICD

on:
  workflow_dispatch: # allow workflow to be manually triggered

  push:
    branches: [main]
    paths:
      - 'src/Services/ListenTogether/**'
      - 'deploy/Services/hub.bicep'
      - '.github/workflows/podcast-hub.yml'

  pull_request:
    branches: [main]
    paths:
      - 'src/Services/ListenTogether/**'
      - '.github/workflows/podcast-hub.yml'

env:
  API_RESOURCE_NAME: podcastapica
  AZURE_RESOURCE_GROUP_NAME: Podcast002

jobs:
  config:
    name: Get Configuration
    uses: ./.github/workflows/environment-config.yml

  # build and publish the hub project and upload it as an artifact
  build:
    name: Build Hub App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build
        run: dotnet build --configuration Release src/Services/ListenTogether/ListenTogether.Hub

      - name: Publish
        run: dotnet publish --configuration Release src/Services/ListenTogether/ListenTogether.Hub --output hub

      - uses: actions/upload-artifact@v3
        with:
          name: drop
          path: hub

  # if code was pushed directly to main, a PR was merged into main, or someone started the workflow manually (on main)
  # deploy the hub resources including a web app, then deploy the hub's source (from the build artifact) to the app
  deploy:
    name: Deploy Hub App
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest

    needs:
      - config
      - build
    environment:
      name: ${{ needs.config.outputs.type }}

    env:
      HUB_WEBAPP_NAME: hub-${{ needs.config.outputs.name_clean }}

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      # - name: Get Storage Account
      #   id: get_storage
      #   run: |
      #     storageAccounts=$( az storage account list -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} )
      #     storageAccountName=$( echo $storageAccounts | jq -r '.[0].name' )
      #     echo "name=$storageAccountName" >> $GITHUB_OUTPUT

      - name: Deploy Hub
        run: az deployment group create -n ghactionlistentogether${{ github.sha }} -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} -f deploy/Services/hub.bicep -p name=${{ env.HUB_WEBAPP_NAME }} storageAccountName=cibranchmain560118900 administratorLogin=${{ secrets.PODCASTDB_USER_LOGIN }} administratorLoginPassword=${{ secrets.PODCASTDB_USER_PASSWORD }}

      - uses: actions/download-artifact@v3
        with:
          name: drop
          path: hub

      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.HUB_WEBAPP_NAME }}
          package: hub
