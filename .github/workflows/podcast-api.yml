name: Podcast API CICD

on:
  # workflow_dispatch: # allow workflow to be manually triggered

  push:
    branches: [main]
    paths:
      - 'src/Services/Podcasts/**'
      - 'deploy/Services/api.bicep'
      - '.github/workflows/podcast-api.yml'

  pull_request:
    branches: [main]
    paths:
      - 'src/Services/Podcasts/**'
      - '.github/workflows/podcast-api.yml'

env:
  AZURE_RESOURCE_GROUP_NAME: Podcast002

jobs:
  config:
    name: Get Configuration
    uses: ./.github/workflows/environment-config.yml

  # if a pull request triggered the action build all three docker images
  build-pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    needs: config
    env:
      ACR_NAME: ${{ needs.config.outputs.name_cleaner }}
      ACR_HOST: ${{ needs.config.outputs.name_cleaner }}.azurecr.io

    steps:
      - uses: actions/checkout@v3

      - name: Build Podcast Updater
        run: docker build -f ./src/Services/Podcasts/Podcast.Updater.Worker/Dockerfile -t ${{ env.ACR_HOST }}/podcastupdaterworker:${{ github.sha }} .

      - name: Build Podcast API
        run: docker build -f ./src/Services/Podcasts/Podcast.API/Dockerfile -t ${{ env.ACR_HOST }}/podcastapi:${{ github.sha }} .

      - name: Build Podcast Ingestion
        run: docker build -f ./src/Services/Podcasts/Podcast.Ingestion.Worker/Dockerfile -t ${{ env.ACR_HOST }}/podcastingestionworker:${{ github.sha }} .

  # if code was pushed directly to main, a PR was merged into main, or someone started the workflow manually (on main)
  # deploy the Azure Container Registry (ACR), login to ACR, and build/push all three docker images
  build-and-push:
    name: Build & Push API Images
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest

    needs: config
    environment:
      name: ${{ needs.config.outputs.type }}
    env:
      ACR_NAME: ${{ needs.config.outputs.name_cleaner }}
      ACR_HOST: ${{ needs.config.outputs.name_cleaner }}.azurecr.io

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy ACR
        run: az deployment group create -n ghactionbgtasks${{ github.sha }} -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} -f deploy/Services/acr.bicep -p name=${{ env.ACR_NAME }}

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_HOST }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build Podcast Updater
        run: |
          docker build -f ./src/Services/Podcasts/Podcast.Updater.Worker/Dockerfile -t ${{ env.ACR_HOST }}/podcastupdaterworker:${{ github.sha }} .
          docker push ${{ env.ACR_HOST }}/podcastupdaterworker:${{ github.sha }}

      - name: Build Podcast API
        run: |
          docker build -f ./src/Services/Podcasts/Podcast.API/Dockerfile -t ${{ env.ACR_HOST }}/podcastapi:${{ github.sha }} .
          docker push ${{ env.ACR_HOST }}/podcastapi:${{ github.sha }}

      - name: Build Podcast Ingestion
        run: |
          docker build -f ./src/Services/Podcasts/Podcast.Ingestion.Worker/Dockerfile -t ${{ env.ACR_HOST }}/podcastingestionworker:${{ github.sha }} .
          docker push ${{ env.ACR_HOST }}/podcastingestionworker:${{ github.sha }}

  # if code was pushed directly to main, a PR was merged into main, or someone started the workflow manually (on main)
  # deploy the api backend resources (including three container apps using the three docker images we just pushed to ACR
  # in the build-and-push job above), finally upload the images to the storage account
  deploy:
    name: Deploy API
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest

    needs:
      - config
      - build-and-push

    environment:
      name: ${{ needs.config.outputs.type }}
    env:
      ACR_NAME: ${{ needs.config.outputs.name_cleaner }}

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy Container Apps
        id: deploy_apps
        run: |
          result=$( az deployment group create -n ghaction${{ github.sha }} -g ${{ env.AZURE_RESOURCE_GROUP_NAME }} -f deploy/Services/api.bicep -p name=${{ needs.config.outputs.name }} imageTag=${{ github.sha }} acrName=${{ env.ACR_NAME }} administratorLogin=${{ secrets.PODCASTDB_USER_LOGIN }} administratorLoginPassword=${{ secrets.PODCASTDB_USER_PASSWORD }} )
          outputs=$( echo $deploy | jq '.properties.outputs' )
          storageAccountName=$( echo $outputs | jq '.storageAccountName.value' )
          echo "storage_account=$storageAccountName" >> $GITHUB_OUTPUT

      - name: Upload Images
        uses: azure/powershell@v1
        with:
          azPSVersion: '3.1.0'
          inlineScript: |
            cd deploy/Images
            ./Deploy-Images.ps1 -resourceGroup ${{ env.AZURE_RESOURCE_GROUP_NAME }} -storageName ${{ steps.deploy_apps.outputs.storage_account }}
