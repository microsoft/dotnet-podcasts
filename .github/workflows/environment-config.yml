name: Get Environment

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      type:
        description: 'The type of the environment'
        value: ${{ jobs.env_config.outputs.type }}
      name:
        description: 'The name of the environment'
        value: ${{ jobs.env_config.outputs.name }}
      name_clean:
        description: 'The name_clean of the environment'
        value: ${{ jobs.env_config.outputs.name_clean }}
      name_cleaner:
        description: 'The name_cleaner of the environment'
        value: ${{ jobs.env_config.outputs.name_cleaner }}

env:
  # format: ci-[branch|pr]-[branch name|pr number]-suffex
  ENVIRONMENT_NAME: ci-${{ github.event_name == 'pull_request' && 'pr' || 'branch' }}-${{ github.event_name == 'pull_request' && github.event.number || github.event_name == 'push' && github.ref_name || github.event.ref }}-${{ github.event.repository.id }}

  # branch/Pull request  | Environment Type
  # ---------------------------------------
  # dev/feature branches | Dev
  # feature -> dev PRs   | Test
  # dev -> main PRs      | Pre-Prod
  # main branch          | Prod
  ENVIRONMENT_TYPE: ${{ github.event_name == 'push' && (github.event.ref == 'refs/heads/main' && 'Prod' || 'Dev') || github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' && 'Pre-Prod' || 'Test') || 'Dev' }}

jobs:
  env_config:
    name: Config
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      type: ${{ steps.get_config.outputs.type }}
      name: ${{ steps.get_config.outputs.name }}
      name_clean: ${{ steps.get_config.outputs.name_clean }}
      name_cleaner: ${{ steps.get_config.outputs.name_cleaner }}

    steps:
      # - run: echo "- **Environment Name**  $ENVIRONMENT_NAME" >> $GITHUB_STEP_SUMMARY
      # - run: echo "- **Environment Type**  $ENVIRONMENT_TYPE" >> $GITHUB_STEP_SUMMARY

      - id: get_config
        name: Set Outputs
        shell: python
        run: |
          import os

          type = os.environ.get('ENVIRONMENT_TYPE')
          name = os.environ.get('ENVIRONMENT_NAME')

          name_clean = name.lower().strip().replace(' ', '-').replace('_', '-')
          name_cleaner = name_clean.replace('-', '')

          outputs = [
              f'type={type}'
              f'name={name}',
              f'name_clean={name_clean}',
              f'name_cleaner={name_cleaner}',
          ]

          outputs = '\n'.join(outputs)
          print(outputs)

          github_output = os.environ.get('GITHUB_OUTPUT', None)

          if github_output:
              with open(github_output, 'a+') as f:
                  f.write(outputs)

      # - id: get_config
      #   name: Set Outputs
      #   run: |
      #     "name=ENVIRONMENT_NAME" >> $GITHUB_OUTPUT
      #     "type=ENVIRONMENT_TYPE" >> $GITHUB_OUTPUT

      - name: Ensure GitHub Environments
        uses: actions/github-script@v6
        with:
          script: |
            const environments_result = await github.rest.repos.getAllEnvironments({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const environments = environments_result.data.environments;

            const names = ['Dev', 'Test', 'Pre-Prod', 'Prod'];

            for (let i = 0; i < names.length; i++) {
              const name = names[i];
              const exists = environments.some(e => e.name === name);
              if (!exists) {
                core.setFailed(`A GitHub environment named '${name}' does not exist. Create an environment nammed '${name}' with a secret named 'AZURE_CREDENTIALS'`);
              }
            }
